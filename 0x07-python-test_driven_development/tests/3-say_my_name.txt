===========================
How to use 3-say_my_name.py
===========================

This module defines a function ``say_my_name()``

Usage
=====

``say_my_name()`` prints "My name is <first name> <last name>" based on the first name and last name that is passed in

Valid Test Cases
================

Prints the first name and last name as it is.

::

	>>> say_my_name = __import__('3-say_my_name').say_my_name
	>>> say_my_name("Fortune", "Iheanacho")
	My name is Fortune Iheanacho

The parameter ```last_name``` is optional. If no last name is provided,
an empty string is printed instead.

::

    	>>> say_my_name("Fortune")
    	My name is Fortune

Invalid Test Cases
==================

A TypeError is raise if first_name or last_name is all type but string

::

	>>> say_my_name(23, "Nacho")
	Traceback (most recent call last):
	TypeError: first_name must be a string

::

	>>> say_my_name("Rio", None)
	Traceback (most recent call last):
	TypeError: last_name must be a string

::

	>>> say_my_name("LeBron", ["Cavs", "Lakers", "Heat"])
    	Traceback (most recent call last):
 	TypeError: last_name must be a string

::

	>>> say_my_name({"LeBron": 6, "James": 23}, 7.7)
    	Traceback (most recent call last):
    	TypeError: first_name must be a string

::

    	>>> say_my_name(None)
    	Traceback (most recent call last):
    	TypeError: first_name must be a string

At least one argument must be given

::

	>>> say_my_name()
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'
